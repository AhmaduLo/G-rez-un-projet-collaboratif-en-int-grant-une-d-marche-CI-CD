name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./back
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Run tests
        run: mvn test

      - name: SonarCloud Scan (Backend)
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: ./back
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: yarn

      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadlessCI

      - name: SonarCloud Scan (Frontend)
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: ./front
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY_FRONT }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bobapp-back:latest ./back
          docker push ${{ secrets.DOCKER_USERNAME }}/bobapp-back:latest

      - name: Build & Push Frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bobapp-front:latest ./front
          docker push ${{ secrets.DOCKER_USERNAME }}/bobapp-front:latest
